import unittest
import torch
from configparser import ConfigParser

from src.input_data_generator import InputDataGenerator
from lib.wel_minimal.conll_benchmark import conll_documents

class TestInputDataGenerator(unittest.TestCase):

    def setUp(self):
        self.config = ConfigParser()
        self.config.read('config.ini')

        # Set up the test subject
        self.subject = InputDataGenerator(
                wikipedia_abstracts_file=self.config['DATA']['Wikipedia Abstracts'],
                tokenizer_pretrained_id=self.config['BERT']['Model ID']
            )

    def tearDown(self):
        # Get rid of test subject
        self.subject = None
        self.config = None

    def test_generate_candidates_for_doc(self):
        doc = next(conll_documents(self.config['DATA']['Conll Annotated']))
        doc_entities = [{'Position': [0, 0], 'GroundTruth': 'B', 'Candidates': ['Q4053754', 'Q5413406', 'Q224475', 'Q5330551', 'Q458']}, {'Position': [2, 2], 'GroundTruth': 'Q183', 'Candidates': ['Q2990861', 'Q3071702', 'Q24088311', 'Q2355124', 'Q5669068', 'Q6552879', 'Q261583', 'Q336526', 'Q4895077', 'Q7174212', 'Q5807368', 'Q945511', 'Q4798810', 'Q298022', 'Q7736211', 'Q22097207', 'Q188', 'Q2699418', 'Q5364500', 'Q3708826', 'Q16729252', 'Q7922414', 'Q2734574', 'Q3735925', 'Q348514', 'Q7380995', 'Q7344737']}, {'Position': [6, 6], 'GroundTruth': 'Q145', 'Candidates': ['Q842438', 'Q1196012', 'Q1248800', 'Q849811']}, {'Position': [9, 10], 'GroundTruth': 'B', 'Candidates': ['Q54893024', 'Q2073954', 'Q26634508', 'Q7172840']}, {'Position': [11, 11], 'GroundTruth': 'Q240', 'Candidates': []}, {'Position': [14, 15], 'GroundTruth': 'Q8880', 'Candidates': ['Q8880']}, {'Position': [22, 22], 'GroundTruth': 'Q183', 'Candidates': ['Q2990861', 'Q3071702', 'Q24088311', 'Q2355124', 'Q5669068', 'Q6552879', 'Q261583', 'Q336526', 'Q4895077', 'Q7174212', 'Q5807368', 'Q945511', 'Q4798810', 'Q298022', 'Q7736211', 'Q22097207', 'Q188', 'Q2699418', 'Q5364500', 'Q3708826', 'Q16729252', 'Q7922414', 'Q2734574', 'Q3735925', 'Q348514', 'Q7380995', 'Q7344737']}, {'Position': [28, 28], 'GroundTruth': 'Q145', 'Candidates': ['Q842438', 'Q1196012', 'Q1248800', 'Q849811']}, {'Position': [43, 43], 'GroundTruth': 'Q183', 'Candidates': ['Q41304', 'Q183', 'Q7318', 'Q22006587', 'Q1350565', 'Q423030', 'Q16209935']}, {'Position': [48, 49], 'GroundTruth': 'Q458', 'Candidates': ['Q319328', 'Q458']}, {'Position': [53, 54], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [66, 66], 'GroundTruth': 'Q145', 'Candidates': ['Q16054730', 'Q3240725', 'Q690213']}, {'Position': [94, 94], 'GroundTruth': 'Q8880', 'Candidates': ['Q409597']}, {'Position': [98, 101], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [129, 130], 'GroundTruth': 'Q458', 'Candidates': ['Q319328', 'Q458']}, {'Position': [139, 139], 'GroundTruth': 'B', 'Candidates': ['Q4053754', 'Q5413406', 'Q224475', 'Q5330551', 'Q458']}, {'Position': [142, 143], 'GroundTruth': 'Q78587', 'Candidates': ['Q78587']}, {'Position': [172, 172], 'GroundTruth': 'B', 'Candidates': ['Q2381525', 'Q1420333', 'Q2169476', 'Q78587', 'Q17180596', 'Q534915', 'Q3496482', 'Q686638']}, {'Position': [174, 174], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [179, 179], 'GroundTruth': 'Q145', 'Candidates': ['Q16054730', 'Q3240725', 'Q690213']}, {'Position': [181, 181], 'GroundTruth': 'Q142', 'Candidates': ['Q5548178', 'Q726049', 'Q3037933', 'Q2556465', 'Q659488', 'Q16211444', 'Q732921', 'Q207162', 'Q5362797', 'Q504906', 'Q16275867', 'Q2149490', 'Q3080562', 'Q929852', 'Q142', 'Q6557993', 'Q5342978', 'Q49644', 'Q70802', 'Q6557995', 'Q70972', 'Q1083398', 'Q5478259', 'Q1658604', 'Q30123054', 'Q6408628', 'Q5525090', 'Q294485', 'Q3209212', 'Q42443', 'Q17351934']}, {'Position': [189, 191], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [193, 193], 'GroundTruth': 'Q154666', 'Candidates': ['Q7449138', 'Q2636119', 'Q154666', 'Q638398', 'Q2380000', 'Q851259', 'Q4858621', 'Q1972649', 'Q262909', 'Q2480956', 'Q4081230']}, {'Position': [201, 201], 'GroundTruth': 'B', 'Candidates': ['Q2381525', 'Q1420333', 'Q2169476', 'Q78587', 'Q17180596', 'Q534915', 'Q3496482', 'Q686638']}, {'Position': [209, 209], 'GroundTruth': 'B', 'Candidates': ['Q4053754', 'Q5413406', 'Q224475', 'Q5330551', 'Q458']}, {'Position': [237, 237], 'GroundTruth': 'Q29', 'Candidates': ['Q241649', 'Q6267714', 'Q7573131', 'Q1321', 'Q3492565']}, {'Position': [240, 242], 'GroundTruth': 'Q255657', 'Candidates': ['Q255657']}, {'Position': [246, 246], 'GroundTruth': 'B', 'Candidates': ['Q2381525', 'Q1420333', 'Q2169476', 'Q78587', 'Q17180596', 'Q534915', 'Q3496482', 'Q686638']}, {'Position': [249, 249], 'GroundTruth': 'B', 'Candidates': ['Q4053754', 'Q5413406', 'Q224475', 'Q5330551', 'Q458']}, {'Position': [266, 266], 'GroundTruth': 'Q142', 'Candidates': ['Q5548178', 'Q726049', 'Q3037933', 'Q2556465', 'Q659488', 'Q16211444', 'Q732921', 'Q207162', 'Q5362797', 'Q504906', 'Q16275867', 'Q2149490', 'Q3080562', 'Q929852', 'Q142', 'Q6557993', 'Q5342978', 'Q49644', 'Q70802', 'Q6557995', 'Q70972', 'Q1083398', 'Q5478259', 'Q1658604', 'Q30123054', 'Q6408628', 'Q5525090', 'Q294485', 'Q3209212', 'Q42443', 'Q17351934']}, {'Position': [268, 268], 'GroundTruth': 'Q145', 'Candidates': ['Q16054730', 'Q3240725', 'Q690213']}, {'Position': [270, 270], 'GroundTruth': 'B', 'Candidates': ['Q2381525', 'Q1420333', 'Q2169476', 'Q78587', 'Q17180596', 'Q534915', 'Q3496482', 'Q686638']}, {'Position': [275, 275], 'GroundTruth': 'B', 'Candidates': ['Q4053754', 'Q5413406', 'Q224475', 'Q5330551', 'Q458']}, {'Position': [314, 314], 'GroundTruth': 'Q154666', 'Candidates': ['Q7449138', 'Q2636119', 'Q154666', 'Q638398', 'Q2380000', 'Q851259', 'Q4858621', 'Q1972649', 'Q262909', 'Q2480956', 'Q4081230']}, {'Position': [330, 330], 'GroundTruth': 'Q145', 'Candidates': ['Q842438', 'Q1196012', 'Q1248800', 'Q849811']}, {'Position': [350, 350], 'GroundTruth': 'Q183', 'Candidates': ['Q2990861', 'Q3071702', 'Q24088311', 'Q2355124', 'Q5669068', 'Q6552879', 'Q261583', 'Q336526', 'Q4895077', 'Q7174212', 'Q5807368', 'Q945511', 'Q4798810', 'Q298022', 'Q7736211', 'Q22097207', 'Q188', 'Q2699418', 'Q5364500', 'Q3708826', 'Q16729252', 'Q7922414', 'Q2734574', 'Q3735925', 'Q348514', 'Q7380995', 'Q7344737']}, {'Position': [357, 357], 'GroundTruth': 'Q145', 'Candidates': ['Q842438', 'Q1196012', 'Q1248800', 'Q849811']}, {'Position': [363, 363], 'GroundTruth': 'Q46', 'Candidates': ['Q345567', 'Q5412139', 'Q5412140', 'Q46', 'Q5412143', 'Q7815733', 'Q185144', 'Q579160', 'Q3734794', 'Q17065610', 'Q766618', 'Q198697', 'Q20706779', 'Q47462515', 'Q612228', 'Q165170', 'Q458']}, {'Position': [382, 382], 'GroundTruth': 'Q183', 'Candidates': ['Q41304', 'Q183', 'Q7318', 'Q22006587', 'Q1350565', 'Q423030', 'Q16209935']}, {'Position': [387, 391], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [393, 393], 'GroundTruth': 'B', 'Candidates': ['Q564246', 'Q6972569', 'Q6972571']}, {'Position': [396, 398], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [401, 402], 'GroundTruth': 'B', 'Candidates': []}, {'Position': [404, 404], 'GroundTruth': 'Q586', 'Candidates': ['Q892680', 'Q586', 'Q24203375']}, {'Position': [420, 420], 'GroundTruth': 'Q145', 'Candidates': ['Q842438', 'Q1196012', 'Q1248800', 'Q849811']}, {'Position': [438, 438], 'GroundTruth': 'Q183', 'Candidates': ['Q41304', 'Q183', 'Q7318', 'Q22006587', 'Q1350565', 'Q423030', 'Q16209935']}, {'Position': [443, 443], 'GroundTruth': 'Q145', 'Candidates': ['Q16054730', 'Q3240725', 'Q690213']}, {'Position': [459, 459], 'GroundTruth': 'Q145', 'Candidates': ['Q842438', 'Q1196012', 'Q1248800', 'Q849811']}]
        result = self.subject.get_vectorized_data(doc, doc_entities)
        expected_input_ids = torch.ShortTensor([  101,  2329,  7327, 19164,  2446,  2655,  2000, 17757,  2329, 12559, 1012,  2848, 13934,  9371,  2727,  1011,  5511,  1011,  2570,  1996, 2647,  3222,  2056,  2006,  9432,  2009, 18335,  2007,  2446,  6040, 2000, 10390,  2000, 18454,  2078,  2329, 12559,  2127,  6529,  5646, 3251,  5506, 11190,  4295,  2064,  2022, 11860,  2000,  8351,  1012, 2762,  1005,  1055,  4387,  2000,  1996,  2647,  2586,  1005,  1055, 15651,  2837, 14121,  1062,  9328,  5804,  2056,  2006,  9317, 10390, 2323,  4965,  8351,  4168,  4017,  2013,  3032,  2060,  2084,  3725, 2127,  1996,  4045,  6040,  2001, 24509,  1012,  1000,  2057,  2079, 1050,  1005,  1056,  2490,  2151,  2107, 12832,  2138,  2057,  2079, 1050,  1005,  1056,  2156,  2151,  5286,  2005,  2009,  1010,  1000, 1996,  3222,  1005,  1055,  2708, 14056, 24794,  2271,  3158,  4315, 14674,  2409,  1037,  2739, 27918,  1012,  2002,  2056,  2582,  4045, 2817,  2001,  3223,  1998,  2065,  2009,  2001,  2179,  2008,  2895, 2001,  2734,  2009,  2323,  2022,  2579,  2011,  1996,  2647,  2586, 1012,  2002,  2056,  1037,  6378,  2197,  3204,  2011,  7327,  3888, 5849,  8965, 27424,  2818,  3917,  2000,  7221,  8351, 14332,  1010, 11867, 24129,  2015,  1998, 16492, 24551,  2013,  1996,  2529,  1998, 4111,  2833,  8859,  2001,  1037,  3811,  3563,  1998,  3653,  3540, 13700,  5649,  2693,  2000,  4047,  2529,  2740,  1012, 27424,  2818, 3917,  3818,  7327,  1011,  2898,  5761,  2044,  4311,  2013,  3725, 1998,  2605,  2008,  2104,  5911,  3785,  8351,  2071,  3206,  8945, 20534, 11867,  5063, 22631,  4372,  3401, 21890,  4135, 20166,  1006, 18667,  2063,  1007,  1011,  1011,  5506, 11190,  4295,  1012,  2021, 27424,  2818,  3917,  3530,  2000,  3319,  2010,  6378,  2044,  1996, 7327,  1005,  1055,  3061, 15651,  2837,  1010, 13523, 19301,  4111, 2740,  4584,  1010,  8781,  2065,  2107,  2895,  2001, 15123,  2004, 2045,  2001,  2069,  1037,  7263,  3891,  2000,  2529,  2740,  1012, 3009,  3888,  2704, 21580,  2139, 14412, 21361,  2018,  3041,  5496, 27424,  2818,  3917,  2012,  2019,  7327,  3888,  7767,  1005,  3116, 1997,  4786,  4895, 29427,  7810,  8598,  2083,  1000,  4795,  2236, 6648,  1012,  1000,  1012,  2069,  2605,  1998,  3725,  6153, 27424, 2818,  3917,  1005,  1055,  6378,  1012,  1996,  7327,  1005,  1055, 4045, 15651,  1998,  4800, 10521,  6895, 28296,  5649,  9528,  2024, 2349,  2000,  2128,  1011, 11628,  1996,  3277,  2220,  2279,  3204, 1998,  2191, 11433,  2000,  1996,  3026, 15651,  4584,  1012,  8351, 2031,  2146,  2042,  2124,  2000,  3206, 15121,  2666,  1010,  1037, 4167,  1011, 18313,  4295,  2714,  2000, 18667,  2063,  2029,  2003, 3373,  2000,  2031,  2042,  4015,  2000,  7125,  2083,  5438,  4820, 4111,  5949,  1012,  2329,  6617,  6380,  2006,  9432,  2045,  2001, 2151,  5473,  2000,  2529,  2740,  2013,  2037,  8351,  1010,  2021, 5228,  5142,  2008,  2446,  2231,  6040,  2000, 10390,  2000,  4468, 2329, 12559,  2453,  3747, 10390,  2408,  2885,  1012,  1000,  2054, 2057,  2031,  2000,  2022,  5186,  6176,  1997,  2003,  2129,  2060, 3032,  2024,  2183,  2000,  2202,  2762,  1005,  1055,  2599,  1010, 1000,  6124,  2120,  6617,  1005,  2586,  1006,  1050, 11263,  1007, 3472,  2198,  6746,  3557,  2056,  2006,  4035,  2557,  1012, 19349, 2038,  2419,  4073,  2000,  4047,  2270,  2740,  2044,  7325,  7023, 7798,  1999,  2233,  2044,  1037,  2329,  3189,  4081,  4286,  2071, 3206,  2019,  7355,  2714,  2000,  5506, 11190,  4295,  2011,  5983, 19450, 12486,  1012,  2762,   102,  2329,  2329,  2089,  6523,  2000, 1024,   102])
        expected_input_ids = expected_input_ids.unsqueeze(0)
        expected_attention_mask = torch.BoolTensor(512*[True])
        expected_attention_mask = expected_attention_mask.unsqueeze(0)
        expected_token_type_ids = torch.BoolTensor(505*[False]+7*[True])
        expected_token_type_ids = expected_token_type_ids.unsqueeze(0)
        expected_label = False
        err_msg = "Error in {}"
        self.assertTrue(torch.equal(expected_input_ids, result[0]), err_msg.format("vector 'input_ids'"))
        self.assertTrue(torch.equal(expected_attention_mask, result[1]), err_msg.format("vector 'attention_mask'"))
        self.assertTrue(torch.equal(expected_token_type_ids, result[2]), err_msg.format("vector 'token_type_ids'"))
        self.assertEqual(expected_label, result[3], err_msg.format("label"))


if __name__ == '__main__':
    unittest.main()
